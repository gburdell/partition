// PEG grammar for partition graph used by apfe parser generator

Grammar <- Spacing NameMap? CellEntry* Edges? EOF
CellEntry <- CELL_K Name LCURLY CellBody RCURLY
CellBody <- (CellBodyItem Semi)*
CellBodyItem <- DESIGN_K COLON Name
              / AREA_K COLON Float
		      / (ID_K / LEAFCNT_K / MACROCNT_K) COLON Integer
Edges <- EDGES_K LCURLY Edge* RCURLY

// list of (edge/netname dest-cell-id+).  cellId 0 is port     
Edge <- Name COLON Integer (COMMA Integer)* Semi

Semi <- (!RCURLY SEMI) / &RCURLY

NameMap <- NAMEMAP_K LCURLY NameMapEntry* RCURLY
NameMapEntry <- Integer Identifier

Name <- FullName BitSelect?
FullName <- NameEle ('/' NameEle)*

//NOTE: no space for namemap index (e.g. '#10' not '# 10')
NameEle <- '#' Integer / Identifier

BitSelect <- LBRACK Integer RBRACK

//Tokens 
Integer <- [0-9]+ Spacing
Float <- [0-9]+ ('.' [0-9]+)? ([eE] '-'? [0-9]+)? Spacing
Identifier <- IdentStart IdentCont* Spacing
IdentStart <- [a-zA-Z_]
IdentCont <- IdentStart / [0-9]

NAMEMAP_K <- "nameMap" Spacing
CELL_K <- "cell" Spacing
DESIGN_K <- "design" Spacing
AREA_K <- "area" Spacing
LEAFCNT_K <- "leafCnt" Spacing
MACROCNT_K <- "macroCnt" Spacing
ID_K <- "id" Spacing
EDGES_K <- "edges" Spacing

LCURLY <- '{' Spacing
RCURLY <- '}' Spacing
LBRACK <- '[' Spacing
RBRACK <- ']' Spacing
SEMI <- ';' Spacing
COLON <- ':' Spacing
COMMA <- ',' Spacing

Spacing <- (Space / Comment)*
Comment <- SL_COMMENT / ML_COMMENT
SL_COMMENT  <- "//" (!EOL .)* EOL
ML_COMMENT  <- "/*" (!"*/" .)* "*/"
Space <- ' ' / "\t" / EOL
//These are special (predefined)
//EOL: EndOfLine <- "\r\n" / "\n" / "\r"
//EOF: EndOfFile <- !.

